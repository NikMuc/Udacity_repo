import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

# List to specify the months and days selected by user in later steps

month_list = ["january",
              "february",
              "march",
              "april",
              "may",
              "june",
              "all"]

day_list = ["monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday"]             

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # Get user input for city (chicago, new york city, washington) using a while loop
   
    while True:
        try:
            city = input("\nPlease choose Chicago, New York City or Washington for analysis:\n").lower()
            if city in CITY_DATA.keys():
                print("You chose {} for your analysis!".format(city.title()))
                break
            else:
                print("That is not a valid input. Please choose a city.")
        except:
            print("That is not a valid input. Please choose a city.")
        
    # Get user input for selected month (january, february...) using a while loop
    
    while True:
        try:
            month = input("\nPlease choose respective month for analysis (fullname):\n").lower()
            if month in month_list:
                print("You chose {} for your analysis!".format(month.title()))
                break
            else:
                print("That is not a valid input. Please choose a month.")
        except:
            print("That is not a valid input. Please choose a month.")

    # Get user input for selected day (monday, tuesday...) using a while loop
    
    while True:
        try:
            day = input("\nPlease choose respective weekday for analysis (fullname):\n").lower()
            if day in day_list:
                print("You chose {} for your analysis!".format(day.title()))
                break
            else:
                print("That is not a valid input. Please choose a day.")
        except:
            print("That is not a valid input. Please choose a day.")

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # Load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    
    # Convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # Extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    
     # Create a new column with the combination of Start and End Station for upcomming calculations of the most frequent combination of both
    df["Insert"] = " to "
    df["Start/End Station"] = df["Start Station"] + df["Insert"] + df["End Station"]

    # Filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # Filter by month to create the new dataframe
        df = df[df['month'] == month]

    # Filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # Calculate most common month
    print("\nMost common month:\n", df['month'].mode()[0])

    # Claculate display the most common day of week
    print("\nMost common day:\n", df['day_of_week'].mode()[0])

    # Calculate the most common start hour
    print("\nMost common start time:\n", df['Start Time'].mode()[0])


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # Show most commonly used start station
    print("\nMost commonly used start station:\n", df['Start Station'].mode()[0]) 

    # Show most commonly used end station
    print("\nMost commonly used end station:\n", df['End Station'].mode()[0]) 

    # Show most frequent combination of start station and end station trip
    print("\nMost commonly used combination of start and end station trip:\n", df['Start/End Station'].mode()[0]) 

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # Calculate total travel time
    print("\nTotal travel time (in seconds) amounts to:\n", df['Trip Duration'].sum())

    # Calculate mean travel time
    print("\nMean travel time (in seconds) amounts to:\n", df['Trip Duration'].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Calculate number of respective user types
    print("\nThe users are categorized as follows\n", df['User Type'].value_counts())

    # Calculate number of gender for users || ! Does not necessarily equal user count because of NaN values in gender column ||
    try:
        print("\nUsers by gender:\n", df["Gender"].value_counts())
    except:
        print("\nNo data available in this city\n")

    # Calculate earliest, most recent, and most common year of birth
    try:
        print("\nOldest customers born in:\n", df["Birth Year"].min())
        print("\nYoungest customers born in:\n", df["Birth Year"].max())
        print("\nMost common year of birth:\n", df["Birth Year"].mode()[0])
    except:
        print("\nNo data available in this city\n")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        # Raw data is displayed upon request by the user in this manner: Script should prompt the user if they want
        # to see 5 lines of raw data (yes or no) 
        # after that user is asked whether to restart or not
        add_info = input("\nWould you like to see descriptive statistics (exemplary)? Enter yes or no.\n")
        if add_info.lower() == "yes":
            print(df.describe())
            print()
            print(df.head())
        
        
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()

